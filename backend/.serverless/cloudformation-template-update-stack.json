{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "SignupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/auth-service-dev-signup"
      }
    },
    "UploadImageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/auth-service-dev-uploadImage"
      }
    },
    "LoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/auth-service-dev-login"
      }
    },
    "ProfileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/auth-service-dev-profile"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "auth-service",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/auth-service-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/auth-service-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "auth-service",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "SignupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-59057234-deaa",
          "S3Key": "serverless/auth-service/dev/1729485847210-2024-10-21T04:44:07.210Z/auth-service.zip"
        },
        "Handler": "functions/signup.signup",
        "Runtime": "nodejs20.x",
        "FunctionName": "auth-service-dev-signup",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "hs-user-table",
            "BUCKET_NAME": "hs-image-stores",
            "JWT_SECRET": "72b38ada20b50851ffb00c3ff2a99d8812f50ef139dc7b80bcd8125a20b555d31222b2cb2ab67834f75e8fdbaa6995a9eb3259b161ea04fe025a1a563ddc903d5b687d94e0b7636ae94513ba06610abf9e2ab950a79fa5f4d3034bf8f31ed7e5878b29b11f33934b1fdce26c4bf2567fd2f1262ae92afd0ce176028a0f5b8e8a4a7eb2ba5f8fdbde461e4b17a3b12b5339b36f85b56c6c3fb13cc868039500af87830a81b11051f99b9704b564e3a25e7db7345fcad88138cd3fee1d976b769b5c5082cd057f597ccdff6f61d7e25283b63c2a516a201ae904129077e3f1d6a4844acbddfb0519dc5a4cff9968c7bbb7f2c8d0d603035f78dc23c338aa055289204071186cae749c330787eb1cf722f760f8f9b7c5cc0710876f10bdd21b29caedaec7c1f20a7cc7798f4e76034bdc78a21ce350da32213359fa10d2e2f8d4fa8a122c2c76ab646d1bcb8483fef3479290796211804d476e8ca2a856b39bc29ea1c6f41f11ef82317119b5d5ab7f7e6b8fd9e613dbe659de26070bf75bb9e5dd69284c87605dc604264c53217e1170957486fcfefc2574536228a9aefbab476357c5ab288a89e40d437b5116a368609d2f47b9e629dfdcca3073af50656c83e5763b4dbda4270caa9a55258db3e2b10b7fdb82b41b533f045e2f4aa234064f007b5ef62846a7bc44e6ecda7caad73ead18eb15c3695789d0adbbf20697aae4bd"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignupLogGroup"
      ]
    },
    "UploadImageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-59057234-deaa",
          "S3Key": "serverless/auth-service/dev/1729485847210-2024-10-21T04:44:07.210Z/auth-service.zip"
        },
        "Handler": "functions/uploadImage.uploadImage",
        "Runtime": "nodejs20.x",
        "FunctionName": "auth-service-dev-uploadImage",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "hs-user-table",
            "BUCKET_NAME": "hs-image-stores",
            "JWT_SECRET": "72b38ada20b50851ffb00c3ff2a99d8812f50ef139dc7b80bcd8125a20b555d31222b2cb2ab67834f75e8fdbaa6995a9eb3259b161ea04fe025a1a563ddc903d5b687d94e0b7636ae94513ba06610abf9e2ab950a79fa5f4d3034bf8f31ed7e5878b29b11f33934b1fdce26c4bf2567fd2f1262ae92afd0ce176028a0f5b8e8a4a7eb2ba5f8fdbde461e4b17a3b12b5339b36f85b56c6c3fb13cc868039500af87830a81b11051f99b9704b564e3a25e7db7345fcad88138cd3fee1d976b769b5c5082cd057f597ccdff6f61d7e25283b63c2a516a201ae904129077e3f1d6a4844acbddfb0519dc5a4cff9968c7bbb7f2c8d0d603035f78dc23c338aa055289204071186cae749c330787eb1cf722f760f8f9b7c5cc0710876f10bdd21b29caedaec7c1f20a7cc7798f4e76034bdc78a21ce350da32213359fa10d2e2f8d4fa8a122c2c76ab646d1bcb8483fef3479290796211804d476e8ca2a856b39bc29ea1c6f41f11ef82317119b5d5ab7f7e6b8fd9e613dbe659de26070bf75bb9e5dd69284c87605dc604264c53217e1170957486fcfefc2574536228a9aefbab476357c5ab288a89e40d437b5116a368609d2f47b9e629dfdcca3073af50656c83e5763b4dbda4270caa9a55258db3e2b10b7fdb82b41b533f045e2f4aa234064f007b5ef62846a7bc44e6ecda7caad73ead18eb15c3695789d0adbbf20697aae4bd"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadImageLogGroup"
      ]
    },
    "LoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-59057234-deaa",
          "S3Key": "serverless/auth-service/dev/1729485847210-2024-10-21T04:44:07.210Z/auth-service.zip"
        },
        "Handler": "functions/login.login",
        "Runtime": "nodejs20.x",
        "FunctionName": "auth-service-dev-login",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "hs-user-table",
            "BUCKET_NAME": "hs-image-stores",
            "JWT_SECRET": "72b38ada20b50851ffb00c3ff2a99d8812f50ef139dc7b80bcd8125a20b555d31222b2cb2ab67834f75e8fdbaa6995a9eb3259b161ea04fe025a1a563ddc903d5b687d94e0b7636ae94513ba06610abf9e2ab950a79fa5f4d3034bf8f31ed7e5878b29b11f33934b1fdce26c4bf2567fd2f1262ae92afd0ce176028a0f5b8e8a4a7eb2ba5f8fdbde461e4b17a3b12b5339b36f85b56c6c3fb13cc868039500af87830a81b11051f99b9704b564e3a25e7db7345fcad88138cd3fee1d976b769b5c5082cd057f597ccdff6f61d7e25283b63c2a516a201ae904129077e3f1d6a4844acbddfb0519dc5a4cff9968c7bbb7f2c8d0d603035f78dc23c338aa055289204071186cae749c330787eb1cf722f760f8f9b7c5cc0710876f10bdd21b29caedaec7c1f20a7cc7798f4e76034bdc78a21ce350da32213359fa10d2e2f8d4fa8a122c2c76ab646d1bcb8483fef3479290796211804d476e8ca2a856b39bc29ea1c6f41f11ef82317119b5d5ab7f7e6b8fd9e613dbe659de26070bf75bb9e5dd69284c87605dc604264c53217e1170957486fcfefc2574536228a9aefbab476357c5ab288a89e40d437b5116a368609d2f47b9e629dfdcca3073af50656c83e5763b4dbda4270caa9a55258db3e2b10b7fdb82b41b533f045e2f4aa234064f007b5ef62846a7bc44e6ecda7caad73ead18eb15c3695789d0adbbf20697aae4bd"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LoginLogGroup"
      ]
    },
    "ProfileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-59057234-deaa",
          "S3Key": "serverless/auth-service/dev/1729485847210-2024-10-21T04:44:07.210Z/auth-service.zip"
        },
        "Handler": "functions/profile.userProfile",
        "Runtime": "nodejs20.x",
        "FunctionName": "auth-service-dev-profile",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "hs-user-table",
            "BUCKET_NAME": "hs-image-stores",
            "JWT_SECRET": "72b38ada20b50851ffb00c3ff2a99d8812f50ef139dc7b80bcd8125a20b555d31222b2cb2ab67834f75e8fdbaa6995a9eb3259b161ea04fe025a1a563ddc903d5b687d94e0b7636ae94513ba06610abf9e2ab950a79fa5f4d3034bf8f31ed7e5878b29b11f33934b1fdce26c4bf2567fd2f1262ae92afd0ce176028a0f5b8e8a4a7eb2ba5f8fdbde461e4b17a3b12b5339b36f85b56c6c3fb13cc868039500af87830a81b11051f99b9704b564e3a25e7db7345fcad88138cd3fee1d976b769b5c5082cd057f597ccdff6f61d7e25283b63c2a516a201ae904129077e3f1d6a4844acbddfb0519dc5a4cff9968c7bbb7f2c8d0d603035f78dc23c338aa055289204071186cae749c330787eb1cf722f760f8f9b7c5cc0710876f10bdd21b29caedaec7c1f20a7cc7798f4e76034bdc78a21ce350da32213359fa10d2e2f8d4fa8a122c2c76ab646d1bcb8483fef3479290796211804d476e8ca2a856b39bc29ea1c6f41f11ef82317119b5d5ab7f7e6b8fd9e613dbe659de26070bf75bb9e5dd69284c87605dc604264c53217e1170957486fcfefc2574536228a9aefbab476357c5ab288a89e40d437b5116a368609d2f47b9e629dfdcca3073af50656c83e5763b4dbda4270caa9a55258db3e2b10b7fdb82b41b533f045e2f4aa234064f007b5ef62846a7bc44e6ecda7caad73ead18eb15c3695789d0adbbf20697aae4bd"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ProfileLogGroup"
      ]
    },
    "SignupLambdaVersionA64gQWOMHvmWicO4jBhCQvwcqJbcDUQ3wrKYx11IxxI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignupLambdaFunction"
        },
        "CodeSha256": "2ZHdXnruXZESpVSHbvRuvTgKuxA4nDdAzP2AXBqUw/w="
      }
    },
    "UploadImageLambdaVersion362xciwXL2VB0a0L1lkF50YTYAgTNq6iUlqE6HzpuI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadImageLambdaFunction"
        },
        "CodeSha256": "2ZHdXnruXZESpVSHbvRuvTgKuxA4nDdAzP2AXBqUw/w="
      }
    },
    "LoginLambdaVersionc9f3bDAH6Exm83nobjIi7tehqAVyNHvYVkawOQguE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LoginLambdaFunction"
        },
        "CodeSha256": "2ZHdXnruXZESpVSHbvRuvTgKuxA4nDdAzP2AXBqUw/w="
      }
    },
    "ProfileLambdaVersionYYNv0vIzYl5XFQWeZ09IXtEbhdUhbGa6WthRzmGadfM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ProfileLambdaFunction"
        },
        "CodeSha256": "2ZHdXnruXZESpVSHbvRuvTgKuxA4nDdAzP2AXBqUw/w="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-auth-service",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceSignup": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "signup",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUploadDashimage": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "upload-image",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLogin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "login",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceProfile": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "profile",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSignupOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSignup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUploadDashimageOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadDashimage"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodLoginOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodProfileOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceProfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSignupPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSignup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SignupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SignupLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUploadDashimagePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadDashimage"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UploadImageLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UploadImageLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodLoginPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "LoginLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodProfileGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ProfileLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ProfileLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1729485840791": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodSignupOptions",
        "ApiGatewayMethodUploadDashimageOptions",
        "ApiGatewayMethodLoginOptions",
        "ApiGatewayMethodProfileOptions",
        "ApiGatewayMethodSignupPost",
        "ApiGatewayMethodUploadDashimagePost",
        "ApiGatewayMethodLoginPost",
        "ApiGatewayMethodProfileGet"
      ]
    },
    "SignupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UploadImageLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadImageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "LoginLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ProfileLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ProfileLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "hs-image-stores",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedOrigins": [
                "http://localhost:3000"
              ],
              "AllowedMethods": [
                "GET",
                "PUT",
                "POST",
                "HEAD"
              ],
              "AllowedHeaders": [
                "*"
              ],
              "MaxAge": 2000
            }
          ]
        }
      }
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "hs-user-table",
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-59057234-deaa",
      "Export": {
        "Name": "sls-auth-service-dev-ServerlessDeploymentBucketName"
      }
    },
    "SignupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignupLambdaVersionA64gQWOMHvmWicO4jBhCQvwcqJbcDUQ3wrKYx11IxxI"
      },
      "Export": {
        "Name": "sls-auth-service-dev-SignupLambdaFunctionQualifiedArn"
      }
    },
    "UploadImageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadImageLambdaVersion362xciwXL2VB0a0L1lkF50YTYAgTNq6iUlqE6HzpuI"
      },
      "Export": {
        "Name": "sls-auth-service-dev-UploadImageLambdaFunctionQualifiedArn"
      }
    },
    "LoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LoginLambdaVersionc9f3bDAH6Exm83nobjIi7tehqAVyNHvYVkawOQguE"
      },
      "Export": {
        "Name": "sls-auth-service-dev-LoginLambdaFunctionQualifiedArn"
      }
    },
    "ProfileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ProfileLambdaVersionYYNv0vIzYl5XFQWeZ09IXtEbhdUhbGa6WthRzmGadfM"
      },
      "Export": {
        "Name": "sls-auth-service-dev-ProfileLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-auth-service-dev-ServiceEndpoint"
      }
    }
  }
}