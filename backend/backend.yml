service: auth-service-be

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  iamRoleStatements:
    # Full access to S3
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "*"

    # Full access to DynamoDB
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "arn:aws:dynamodb:*:*:table/*"

    # Full access to API Gateway
    - Effect: "Allow"
      Action:
        - "apigateway:*"
      Resource: "*"

  environment:
    USERS_TABLE: ${self:custom.table}
    BUCKET_NAME: ${self:custom.bucket}
    JWT_SECRET: ${env:JWT_SECRET}

custom:
  bucket: ${opt:bucket, 'hs-profile-images'}
  table: ${opt:table, 'hs-user-table'}

resources:
  Resources:
    ImageStorageBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:custom.bucket}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedHeaders:
                - "*"
              MaxAge: 3000

    ImageStorageBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: !Ref ImageStorageBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: "*"
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
              Resource: !Sub "${ImageStorageBucket.Arn}/*"

    # Lambda Execution Role with full access to DynamoDB and S3
    LambdaExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "userService-lambda-role"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: "LambdaAllS3AndDynamoDBPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                # Full access to all DynamoDB tables
                - Effect: "Allow"
                  Action:
                    - "dynamodb:*"
                  Resource: "arn:aws:dynamodb:*:*:table/*"
                # Full access to all S3 buckets
                - Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                    - "s3:PutObject"
                    - "s3:DeleteObject"
                  Resource: "arn:aws:s3:::*"
                # Permissions for CloudWatch Logs
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

functions:
  signup:
    handler: src/functions/signup.signup
    events:
      - http:
          path: signup
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  uploadImage:
    handler: src/functions/uploadImage.uploadImage
    events:
      - http:
          path: upload-image
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  login:
    handler: src/functions/login.login
    events:
      - http:
          path: login
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  profile:
    handler: src/functions/profile.userProfile
    events:
      - http:
          path: profile
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

plugins:
  - serverless-offline

package:
  include:
    - src/**
    - node_modules/**
  exclude:
    - test/**
    - README.md

outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}/"
